// Mocks generated by Mockito 5.4.4 from annotations
// in camera_poc/test/src/camera/page/camera_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i15;
import 'dart:typed_data' as _i16;
import 'dart:ui' as _i9;

import 'package:camera/camera.dart' as _i3;
import 'package:camera_platform_interface/camera_platform_interface.dart'
    as _i2;
import 'package:camera_poc/core/shared/services/camera/i_camera.dart' as _i13;
import 'package:camera_poc/core/shared/services/camera/library/z_camera_controller.dart'
    as _i5;
import 'package:camera_poc/core/shared/services/camera/library/z_flash_mode.dart'
    as _i7;
import 'package:camera_poc/core/shared/services/camera/library/z_xfile.dart'
    as _i12;
import 'package:camera_poc/src/camera/controller/camera_page_controller.dart'
    as _i6;
import 'package:camera_poc/src/camera/repository/camera_repository.dart'
    as _i11;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/services.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMediaSettings_0 extends _i1.SmartFake implements _i2.MediaSettings {
  _FakeMediaSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraDescription_1 extends _i1.SmartFake
    implements _i3.CameraDescription {
  _FakeCameraDescription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraValue_2 extends _i1.SmartFake implements _i3.CameraValue {
  _FakeCameraValue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeXFile_3 extends _i1.SmartFake implements _i3.XFile {
  _FakeXFile_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_4 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeZCameraController_5 extends _i1.SmartFake
    implements _i5.ZCameraController {
  _FakeZCameraController_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_6 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CameraPageController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraPageController extends _i1.Mock
    implements _i6.CameraPageController {
  MockCameraPageController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ZFlashMode get flashMode => (super.noSuchMethod(
        Invocation.getter(#flashMode),
        returnValue: _i7.ZFlashMode.off,
      ) as _i7.ZFlashMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> takePicture() => (super.noSuchMethod(
        Invocation.method(
          #takePicture,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setFlash(_i7.ZFlashMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFlash,
          [mode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changesFlash(_i7.ZFlashMode? mode) => super.noSuchMethod(
        Invocation.method(
          #changesFlash,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ZCameraController].
///
/// See the documentation for Mockito's code generation for more information.
class MockZCameraController extends _i1.Mock implements _i5.ZCameraController {
  MockZCameraController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MediaSettings get mediaSettings => (super.noSuchMethod(
        Invocation.getter(#mediaSettings),
        returnValue: _FakeMediaSettings_0(
          this,
          Invocation.getter(#mediaSettings),
        ),
      ) as _i2.MediaSettings);

  @override
  _i3.CameraDescription get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _FakeCameraDescription_1(
          this,
          Invocation.getter(#description),
        ),
      ) as _i3.CameraDescription);

  @override
  _i3.ResolutionPreset get resolutionPreset => (super.noSuchMethod(
        Invocation.getter(#resolutionPreset),
        returnValue: _i3.ResolutionPreset.low,
      ) as _i3.ResolutionPreset);

  @override
  bool get enableAudio => (super.noSuchMethod(
        Invocation.getter(#enableAudio),
        returnValue: false,
      ) as bool);

  @override
  int get cameraId => (super.noSuchMethod(
        Invocation.getter(#cameraId),
        returnValue: 0,
      ) as int);

  @override
  _i3.CameraValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeCameraValue_2(
          this,
          Invocation.getter(#value),
        ),
      ) as _i3.CameraValue);

  @override
  set value(_i3.CameraValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void debugCheckIsDisposed() => super.noSuchMethod(
        Invocation.method(
          #debugCheckIsDisposed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> prepareForVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #prepareForVideoRecording,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> pausePreview() => (super.noSuchMethod(
        Invocation.method(
          #pausePreview,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> resumePreview() => (super.noSuchMethod(
        Invocation.method(
          #resumePreview,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setDescription(_i3.CameraDescription? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDescription,
          [description],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i3.XFile> takePicture() => (super.noSuchMethod(
        Invocation.method(
          #takePicture,
          [],
        ),
        returnValue: _i8.Future<_i3.XFile>.value(_FakeXFile_3(
          this,
          Invocation.method(
            #takePicture,
            [],
          ),
        )),
      ) as _i8.Future<_i3.XFile>);

  @override
  _i8.Future<void> startImageStream(_i3.onLatestImageAvailable? onAvailable) =>
      (super.noSuchMethod(
        Invocation.method(
          #startImageStream,
          [onAvailable],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> stopImageStream() => (super.noSuchMethod(
        Invocation.method(
          #stopImageStream,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> startVideoRecording(
          {_i3.onLatestImageAvailable? onAvailable}) =>
      (super.noSuchMethod(
        Invocation.method(
          #startVideoRecording,
          [],
          {#onAvailable: onAvailable},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i3.XFile> stopVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #stopVideoRecording,
          [],
        ),
        returnValue: _i8.Future<_i3.XFile>.value(_FakeXFile_3(
          this,
          Invocation.method(
            #stopVideoRecording,
            [],
          ),
        )),
      ) as _i8.Future<_i3.XFile>);

  @override
  _i8.Future<void> pauseVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #pauseVideoRecording,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> resumeVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #resumeVideoRecording,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i4.Widget buildPreview() => (super.noSuchMethod(
        Invocation.method(
          #buildPreview,
          [],
        ),
        returnValue: _FakeWidget_4(
          this,
          Invocation.method(
            #buildPreview,
            [],
          ),
        ),
      ) as _i4.Widget);

  @override
  _i8.Future<double> getMaxZoomLevel() => (super.noSuchMethod(
        Invocation.method(
          #getMaxZoomLevel,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<double> getMinZoomLevel() => (super.noSuchMethod(
        Invocation.method(
          #getMinZoomLevel,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<void> setZoomLevel(double? zoom) => (super.noSuchMethod(
        Invocation.method(
          #setZoomLevel,
          [zoom],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setFlashMode(_i3.FlashMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFlashMode,
          [mode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setExposureMode(_i3.ExposureMode? mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExposureMode,
          [mode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setExposurePoint(_i9.Offset? point) => (super.noSuchMethod(
        Invocation.method(
          #setExposurePoint,
          [point],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<double> getMinExposureOffset() => (super.noSuchMethod(
        Invocation.method(
          #getMinExposureOffset,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<double> getMaxExposureOffset() => (super.noSuchMethod(
        Invocation.method(
          #getMaxExposureOffset,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<double> getExposureOffsetStepSize() => (super.noSuchMethod(
        Invocation.method(
          #getExposureOffsetStepSize,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<double> setExposureOffset(double? offset) => (super.noSuchMethod(
        Invocation.method(
          #setExposureOffset,
          [offset],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<void> lockCaptureOrientation(
          [_i10.DeviceOrientation? orientation]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lockCaptureOrientation,
          [orientation],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setFocusMode(_i3.FocusMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFocusMode,
          [mode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> unlockCaptureOrientation() => (super.noSuchMethod(
        Invocation.method(
          #unlockCaptureOrientation,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setFocusPoint(_i9.Offset? point) => (super.noSuchMethod(
        Invocation.method(
          #setFocusPoint,
          [point],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IRepositoryCamera].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRepositoryCamera extends _i1.Mock implements _i11.IRepositoryCamera {
  MockIRepositoryCamera() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.ZCameraController> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue:
            _i8.Future<_i5.ZCameraController>.value(_FakeZCameraController_5(
          this,
          Invocation.method(
            #initialize,
            [],
          ),
        )),
      ) as _i8.Future<_i5.ZCameraController>);

  @override
  _i8.Future<_i12.ZXFile?> takePicture() => (super.noSuchMethod(
        Invocation.method(
          #takePicture,
          [],
        ),
        returnValue: _i8.Future<_i12.ZXFile?>.value(),
      ) as _i8.Future<_i12.ZXFile?>);

  @override
  _i8.Future<void> setFlash(_i7.ZFlashMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFlash,
          [mode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CameraValue].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraValue extends _i1.Mock implements _i3.CameraValue {
  MockCameraValue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isTakingPicture => (super.noSuchMethod(
        Invocation.getter(#isTakingPicture),
        returnValue: false,
      ) as bool);

  @override
  bool get isRecordingVideo => (super.noSuchMethod(
        Invocation.getter(#isRecordingVideo),
        returnValue: false,
      ) as bool);

  @override
  bool get isStreamingImages => (super.noSuchMethod(
        Invocation.getter(#isStreamingImages),
        returnValue: false,
      ) as bool);

  @override
  bool get isPreviewPaused => (super.noSuchMethod(
        Invocation.getter(#isPreviewPaused),
        returnValue: false,
      ) as bool);

  @override
  _i3.FlashMode get flashMode => (super.noSuchMethod(
        Invocation.getter(#flashMode),
        returnValue: _i3.FlashMode.off,
      ) as _i3.FlashMode);

  @override
  _i3.ExposureMode get exposureMode => (super.noSuchMethod(
        Invocation.getter(#exposureMode),
        returnValue: _i3.ExposureMode.auto,
      ) as _i3.ExposureMode);

  @override
  _i3.FocusMode get focusMode => (super.noSuchMethod(
        Invocation.getter(#focusMode),
        returnValue: _i3.FocusMode.auto,
      ) as _i3.FocusMode);

  @override
  bool get exposurePointSupported => (super.noSuchMethod(
        Invocation.getter(#exposurePointSupported),
        returnValue: false,
      ) as bool);

  @override
  bool get focusPointSupported => (super.noSuchMethod(
        Invocation.getter(#focusPointSupported),
        returnValue: false,
      ) as bool);

  @override
  _i10.DeviceOrientation get deviceOrientation => (super.noSuchMethod(
        Invocation.getter(#deviceOrientation),
        returnValue: _i10.DeviceOrientation.portraitUp,
      ) as _i10.DeviceOrientation);

  @override
  _i3.CameraDescription get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _FakeCameraDescription_1(
          this,
          Invocation.getter(#description),
        ),
      ) as _i3.CameraDescription);

  @override
  bool get isRecordingPaused => (super.noSuchMethod(
        Invocation.getter(#isRecordingPaused),
        returnValue: false,
      ) as bool);

  @override
  double get aspectRatio => (super.noSuchMethod(
        Invocation.getter(#aspectRatio),
        returnValue: 0.0,
      ) as double);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get isCaptureOrientationLocked => (super.noSuchMethod(
        Invocation.getter(#isCaptureOrientationLocked),
        returnValue: false,
      ) as bool);

  @override
  _i3.CameraValue copyWith({
    bool? isInitialized,
    bool? isRecordingVideo,
    bool? isTakingPicture,
    bool? isStreamingImages,
    String? errorDescription,
    _i9.Size? previewSize,
    bool? isRecordingPaused,
    _i3.FlashMode? flashMode,
    _i3.ExposureMode? exposureMode,
    _i3.FocusMode? focusMode,
    bool? exposurePointSupported,
    bool? focusPointSupported,
    _i10.DeviceOrientation? deviceOrientation,
    _i3.Optional<_i10.DeviceOrientation>? lockedCaptureOrientation,
    _i3.Optional<_i10.DeviceOrientation>? recordingOrientation,
    bool? isPreviewPaused,
    _i3.CameraDescription? description,
    _i3.Optional<_i10.DeviceOrientation>? previewPauseOrientation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #isInitialized: isInitialized,
            #isRecordingVideo: isRecordingVideo,
            #isTakingPicture: isTakingPicture,
            #isStreamingImages: isStreamingImages,
            #errorDescription: errorDescription,
            #previewSize: previewSize,
            #isRecordingPaused: isRecordingPaused,
            #flashMode: flashMode,
            #exposureMode: exposureMode,
            #focusMode: focusMode,
            #exposurePointSupported: exposurePointSupported,
            #focusPointSupported: focusPointSupported,
            #deviceOrientation: deviceOrientation,
            #lockedCaptureOrientation: lockedCaptureOrientation,
            #recordingOrientation: recordingOrientation,
            #isPreviewPaused: isPreviewPaused,
            #description: description,
            #previewPauseOrientation: previewPauseOrientation,
          },
        ),
        returnValue: _FakeCameraValue_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #isInitialized: isInitialized,
              #isRecordingVideo: isRecordingVideo,
              #isTakingPicture: isTakingPicture,
              #isStreamingImages: isStreamingImages,
              #errorDescription: errorDescription,
              #previewSize: previewSize,
              #isRecordingPaused: isRecordingPaused,
              #flashMode: flashMode,
              #exposureMode: exposureMode,
              #focusMode: focusMode,
              #exposurePointSupported: exposurePointSupported,
              #focusPointSupported: focusPointSupported,
              #deviceOrientation: deviceOrientation,
              #lockedCaptureOrientation: lockedCaptureOrientation,
              #recordingOrientation: recordingOrientation,
              #isPreviewPaused: isPreviewPaused,
              #description: description,
              #previewPauseOrientation: previewPauseOrientation,
            },
          ),
        ),
      ) as _i3.CameraValue);
}

/// A class which mocks [ICamera].
///
/// See the documentation for Mockito's code generation for more information.
class MockICamera extends _i1.Mock implements _i13.ICamera {
  MockICamera() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.ZCameraController> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue:
            _i8.Future<_i5.ZCameraController>.value(_FakeZCameraController_5(
          this,
          Invocation.method(
            #initialize,
            [],
          ),
        )),
      ) as _i8.Future<_i5.ZCameraController>);

  @override
  _i8.Future<_i12.ZXFile?> takePicture() => (super.noSuchMethod(
        Invocation.method(
          #takePicture,
          [],
        ),
        returnValue: _i8.Future<_i12.ZXFile?>.value(),
      ) as _i8.Future<_i12.ZXFile?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> setFlashMode(_i7.ZFlashMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFlashMode,
          [mode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ZXFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockZXFile extends _i1.Mock implements _i12.ZXFile {
  MockZXFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i8.Future<void> saveTo(String? path) => (super.noSuchMethod(
        Invocation.method(
          #saveTo,
          [path],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<String> readAsString(
          {_i15.Encoding? encoding = const _i15.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i16.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i8.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
      ) as _i8.Future<_i16.Uint8List>);

  @override
  _i8.Stream<_i16.Uint8List> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i8.Stream<_i16.Uint8List>.empty(),
      ) as _i8.Stream<_i16.Uint8List>);

  @override
  _i8.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i8.Future<DateTime>.value(_FakeDateTime_6(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i8.Future<DateTime>);
}
